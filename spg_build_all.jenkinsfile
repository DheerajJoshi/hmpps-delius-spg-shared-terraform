/* The following parameters are required from Jenkins GUI or other upstream jobs
        environment_name
        project_branch
        spg_image_version
        confirm (boolean)
*/

def build_job_if_exists(job) {
    if (jenkins.model.Jenkins.instance.getItemByFullName(job) != null) {
        build job: job,
        parameters: [[$class: 'BooleanParameterValue', name: 'confirmation', value: false],
            string(name: 'environment_name', value: String.valueOf(environment_name)),
            string(name: 'project_branch', value: String.valueOf(project_branch)),
            string(name: 'spg_image_version', value: String.valueOf(spg_image_version))
        ]
    } else {
        println("Skipping ${job} as it doesn't exist in this environment")
    }
}

pipeline {
    agent { label "spg_builds" }

    stages {
        stage('Notify build started') {
            steps {
                slackSend(message: "${env.JOB_NAME} ${env.BUILD_NUMBER} - Build ALL Started (<${env.BUILD_URL.replace(':8080', '')}|Open>)")
            }
        }

        stage('SPG Infrastructure') {
            steps { build_job_if_exists("DAMS/Environments/${environment_name}/SPG/Deploy_Infrastructure") }
        }

        stage('SPG Application') {
            steps { build_job_if_exists("DAMS/Environments/${environment_name}/SPG/Deploy_Application") }
        }

        stage('Smoke test') {
            steps {
                // NEEDS TO WAIT FOR LATEST INSTANCES TO BE UP (do a version check?)!!!
                build_job_if_exists("DAMS/Environments/${environment_name}/SPG/Smoke_Test")
            }
        }
    }

    post {
        success {
            slackSend(message: "${env.JOB_NAME} ${env.BUILD_NUMBER} - Build ALL completed (<${env.BUILD_URL.replace(':8080', '')}|Open>)", color: 'good')
        }
        failure {
            slackSend(message: "${env.JOB_NAME} ${env.BUILD_NUMBER} - Build ALL failed (<${env.BUILD_URL.replace(':8080', '')}|Open>)", color: 'danger')
        }
        always {
            deleteDir()
        }
    }
}
